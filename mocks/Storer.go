// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	models "github.com/bersennaidoo/filmdb/internal/domain/models"
	mock "github.com/stretchr/testify/mock"
)

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Storer) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *Storer) Get(id int64) (*models.Movie, error) {
	ret := _m.Called(id)

	var r0 *models.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*models.Movie, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *models.Movie); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: movie
func (_m *Storer) Insert(movie *models.Movie) error {
	ret := _m.Called(movie)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Movie) error); ok {
		r0 = rf(movie)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: movie
func (_m *Storer) Update(movie *models.Movie) error {
	ret := _m.Called(movie)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Movie) error); ok {
		r0 = rf(movie)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
