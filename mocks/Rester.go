// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// Rester is an autogenerated mock type for the Rester type
type Rester struct {
	mock.Mock
}

// createMovieHandler provides a mock function with given fields: w, r
func (_m *Rester) createMovieHandler(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// deleteMovieHandler provides a mock function with given fields: w, r
func (_m *Rester) deleteMovieHandler(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// healthcheckHandler provides a mock function with given fields: w, r
func (_m *Rester) healthcheckHandler(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// showMovieHandler provides a mock function with given fields: w, r
func (_m *Rester) showMovieHandler(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// updateMovieHandler provides a mock function with given fields: w, r
func (_m *Rester) updateMovieHandler(w http.ResponseWriter, r *http.Request) {
	_m.Called(w, r)
}

// NewRester creates a new instance of Rester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRester(t interface {
	mock.TestingT
	Cleanup(func())
}) *Rester {
	mock := &Rester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
